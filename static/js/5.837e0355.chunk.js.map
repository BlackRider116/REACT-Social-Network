{"version":3,"sources":["assets/image/avatarDefault.jpg","hoc/withAuthRedirect.js","styles/Dialogs.module.scss","components/Navbar/Dialogs/UsersDialog/UsersDialog.jsx","components/Navbar/Dialogs/Messages/Messages.jsx","components/Navbar/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","UsersDialog","Card","className","styles","cardDialogs","style","width","height","userInfo","map","user","key","id","openUserDialogsId","dialogUser","dialogUser_active","dialogUser_Item","alt","src","photos","small","avatarDefault","onClick","userMessages","userName","fontSize","format","lastUserActivityDate","hasNewMessages","textAlign","color","NewMessageFormRedux","reduxForm","form","submit","message","dispatch","a","sendMessageThunk","userId","newMessage","reset","onSubmit","handleSubmit","input","Field","name","component","placeholder","Button","variant","type","Messages","myId","messageItem","items","item","senderId","message_right","message_left","isSelect","message_card_select","message_card","selectMessageThunk","body","replace","DeleteFilled","message_delete","deleteMessageThunk","message_data_right","message_data_left","addedAt","viewed","message_viewed","DialogsContainer","getAllDialogsThunk","getUserMessagesThunk","dialogsPage","usersInfo","compose","messagesPage"],"mappings":"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","file":"static/js/5.837e0355.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatarDefault.6c93098b.jpg\";","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__Vj-n5\",\"cardDialogs\":\"Dialogs_cardDialogs__1uSuo\",\"dialogUser\":\"Dialogs_dialogUser__3ZW-R\",\"dialogUser_active\":\"Dialogs_dialogUser_active__Gv5WR\",\"dialogUser_Item\":\"Dialogs_dialogUser_Item__3Msgq\",\"activeName\":\"Dialogs_activeName__2eTHX\",\"message\":\"Dialogs_message__2tLdL\",\"message_card\":\"Dialogs_message_card__3_tVC\",\"message_card_select\":\"Dialogs_message_card_select__3US-J\",\"message_delete\":\"Dialogs_message_delete__347JM\",\"message_left\":\"Dialogs_message_left__3qHEf\",\"message_right\":\"Dialogs_message_right__2SbB4\",\"message_data_right\":\"Dialogs_message_data_right__OoqIP\",\"message_data_left\":\"Dialogs_message_data_left__1MamM\",\"message_viewed\":\"Dialogs_message_viewed__275qw\",\"input\":\"Dialogs_input__Ed3Pc\"};","import React from \"react\";\nimport styles from \"../../../../styles/Dialogs.module.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport avatarDefault from \"../../../../assets/image/avatarDefault.jpg\";\nimport { Card } from \"react-bootstrap\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport Moment from \"react-moment\";\n\nconst UsersDialog = props => {\n  return (\n    <Card className={styles.cardDialogs}>\n      <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\n        {props.userInfo.map(user => (\n          <Card\n            key={user.id}\n            className={\n              props.openUserDialogsId === user.id\n                ? `${styles.dialogUser} ${styles.dialogUser_active}`\n                : styles.dialogUser\n            }\n          >\n            <div className={styles.dialogUser_Item}>\n              <NavLink to={`/profile/${user.id}`}>\n                <img\n                  alt={user.id}\n                  src={user.photos.small ? user.photos.small : avatarDefault}\n                />\n              </NavLink>\n              <NavLink\n                to={`/dialogs/${user.id}`}\n                onClick={() => props.userMessages(user.id)}\n              >\n                <div>{user.userName}</div>\n\n                <div style={{ fontSize: \"14px\" }}>\n                  {\"Был(a): \"}\n                  <Moment\n                    format=\"DD-MM-YYYY HH:mm\"\n                    style={{ fontSize: \"12px\" }}\n                  >\n                    {user.lastUserActivityDate}\n                  </Moment>\n                </div>\n                {user.hasNewMessages && (\n                  <span\n                    style={{\n                      fontSize: \"14px\",\n                      textAlign: \"center\",\n                      color: \"red\"\n                    }}\n                  >\n                    Новое сообщение\n                  </span>\n                )}\n              </NavLink>\n            </div>\n          </Card>\n        ))}\n      </Scrollbars>\n    </Card>\n  );\n};\n\nexport default UsersDialog;\n","import React from \"react\";\nimport styles from \"../../../../styles/Dialogs.module.scss\";\nimport Moment from \"react-moment\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { DeleteFilled } from \"@ant-design/icons\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\n\nconst Messages = ({ myId, ...props }) => {\n  let messageItem = props.userMessages.items || [];\n\n  return (\n    <Card className={styles.cardDialogs}>\n      <div style={{ height: \"86vh\" }}>\n        <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\n          {messageItem.map(item => (\n            <div key={item.id} className={`${styles.message}`}>\n              <Card\n                className={`${\n                  item.senderId === myId\n                    ? styles.message_right\n                    : styles.message_left\n                } ${\n                  item.isSelect\n                    ? `${styles.message_card_select} ${styles.message_card}`\n                    : styles.message_card\n                }`}\n                onClick={() => props.selectMessageThunk(item.id)}\n              >\n                <div>\n                  {item.body.replace(\"<br />\", \"\")}\n                  {item.isSelect && item.senderId === myId && (\n                    <span>\n                      <DeleteFilled\n                        className={styles.message_delete}\n                        onClick={() => props.deleteMessageThunk(item)}\n                      />\n                    </span>\n                  )}\n                </div>\n\n                <Moment\n                  format=\"DD-MM-YYYY HH:mm\"\n                  className={\n                    item.senderId === myId\n                      ? styles.message_data_right\n                      : styles.message_data_left\n                  }\n                >\n                  {item.addedAt}\n                </Moment>\n                {item.senderId === myId && !item.viewed && (\n                  <div className={styles.message_viewed}>не прочитано</div>\n                )}\n              </Card>\n            </div>\n          ))}\n        </Scrollbars>\n      </div>\n      {props.openUserDialogsId !== -1 && (\n        <NewMessageFormRedux\n          sendMessageThunk={props.sendMessageThunk}\n          userId={props.openUserDialogsId}\n        />\n      )}\n    </Card>\n  );\n};\n\nconst NewMessageForm = props => {\n  const submit = async (message, dispatch) => {\n    await props.sendMessageThunk(props.userId, message.newMessage);\n    dispatch(props.reset(\"newMessage\"));\n  };\n\n  return (\n    <form onSubmit={props.handleSubmit(submit)}>\n      <div className={styles.input}>\n        <Field\n          name=\"newMessage\"\n          component=\"textarea\"\n          placeholder=\" Введите сообщение\"\n        />\n        <Button variant=\"secondary\" type=\"submit\">\n          Ok\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst NewMessageFormRedux = reduxForm({ form: \"newMessage\" })(NewMessageForm);\n\nexport default Messages;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport styles from \"../../../styles/Dialogs.module.scss\";\nimport { getAllDialogsThunk, getUserMessagesThunk, UserMessagesType, sendMessageThunk, deleteMessageThunk, selectMessageThunk, MessagesType } from \"../../../redux/reduceDialogs\";\nimport { UserInfoType } from '../../../redux/reduceDialogs'\nimport { GlobalStateType } from \"../../../redux/reduxStore\";\nimport UsersDialog from \"./UsersDialog/UsersDialog\";\nimport Messages from \"./Messages/Messages\";\n\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\nclass DialogsContainer extends React.Component<PropsType> {\n  componentDidMount() {\n    this.props.getAllDialogsThunk();\n    this.props.getUserMessagesThunk(this.props.openUserDialogsId)\n  }\n\n  componentWillUnmount() {\n    this.props.getUserMessagesThunk(-1)\n  }\n\n  render() {\n    return (\n      <div className={styles.dialogsPage}>\n        <div>\n          <UsersDialog\n            userInfo={this.props.usersInfo}\n            userMessages={this.props.getUserMessagesThunk}\n            openUserDialogsId={this.props.openUserDialogsId} />\n        </div>\n\n        <div>\n          <Messages\n            userMessages={this.props.userMessages}\n            openUserDialogsId={this.props.openUserDialogsId}\n            myId={this.props.myId}\n            sendMessageThunk={this.props.sendMessageThunk}\n            selectMessageThunk={this.props.selectMessageThunk}\n            deleteMessageThunk={this.props.deleteMessageThunk} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\ntype MapStateToPropsType = {\n  usersInfo: Array<UserInfoType>\n  userMessages: UserMessagesType\n  openUserDialogsId: number\n  myId: number | null\n}\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\n  return {\n    usersInfo: state.messagesPage.usersInfo,\n    userMessages: state.messagesPage.userMessages,\n    openUserDialogsId: state.messagesPage.openUserDialogsId,\n    myId: state.auth.userId\n  };\n};\n\ntype MapDispatchToPropsType = {\n  getAllDialogsThunk: () => void\n  getUserMessagesThunk: (userId: number) => void\n  sendMessageThunk: (userId: number, message: string) => void\n  deleteMessageThunk: (message: MessagesType) => void\n  selectMessageThunk: (messageId: string) => void\n}\nexport default compose(\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps,\n    {\n      getAllDialogsThunk,\n      getUserMessagesThunk,\n      sendMessageThunk,\n      deleteMessageThunk,\n      selectMessageThunk\n    }),\n  withAuthRedirect\n)(DialogsContainer);\n"],"sourceRoot":""}