{"version":3,"sources":["assets/image/avatarDefault.jpg","hoc/withAuthRedirect.js","styles/Dialogs.module.scss","components/Navbar/Dialogs/UsersDialog/UsersDialog.jsx","components/Navbar/Dialogs/Messages/Messages.jsx","components/Navbar/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","UsersDialog","userInfo","map","user","Card","key","id","className","styles","dialogUser","alt","src","photos","small","avatarDefault","activeClassName","activeName","onClick","userMessages","userName","NewMessageFormRedux","reduxForm","form","submit","message","dispatch","a","sendMessageThunk","userId","newMessage","reset","onSubmit","handleSubmit","input","Field","name","component","placeholder","Button","variant","type","Messages","myId","messageItem","items","cardMessage","style","height","width","item","senderId","message_right","message_left","isSelect","message_card_select","message_card","selectMessageThunk","body","replace","DeleteFilled","message_delete","deleteMessageThunk","format","message_data_right","message_data_left","addedAt","viewed","message_viewed","length","openUserDialogsId","DialogsContainer","match","params","getAllDialogsThunk","getUserMessagesThunk","console","log","dialogsPage","usersInfo","compose","messagesPage","withRouter"],"mappings":"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","file":"static/js/5.df3de0f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatarDefault.6c93098b.jpg\";","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__Vj-n5\",\"cardMessage\":\"Dialogs_cardMessage__3lT6B\",\"dialogUser\":\"Dialogs_dialogUser__3ZW-R\",\"active\":\"Dialogs_active__3_eL3\",\"activeName\":\"Dialogs_activeName__2eTHX\",\"message\":\"Dialogs_message__2tLdL\",\"message_card\":\"Dialogs_message_card__3_tVC\",\"message_card_select\":\"Dialogs_message_card_select__3US-J\",\"message_delete\":\"Dialogs_message_delete__347JM\",\"message_left\":\"Dialogs_message_left__3qHEf\",\"message_right\":\"Dialogs_message_right__2SbB4\",\"message_data_right\":\"Dialogs_message_data_right__OoqIP\",\"message_data_left\":\"Dialogs_message_data_left__1MamM\",\"message_viewed\":\"Dialogs_message_viewed__275qw\",\"input\":\"Dialogs_input__Ed3Pc\"};","import React from \"react\";\nimport styles from \"../../../../styles/Dialogs.module.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport avatarDefault from \"../../../../assets/image/avatarDefault.jpg\";\nimport { Card } from \"react-bootstrap\";\n\nconst UsersDialog = props => {\n  // console.log(props.userInfo);\n  return (\n    <>\n      {props.userInfo.map(user => (\n        <Card key={user.id} className={styles.dialogUser}>\n            <NavLink to={`/profile/${user.id}`}>\n              <img\n                alt={user.id}\n                src={user.photos.small ? user.photos.small : avatarDefault}\n              />\n            </NavLink>\n            <NavLink\n              to={`/dialogs/${user.id}`}\n              activeClassName={styles.activeName}\n            >\n              <div onClick={() => props.userMessages(user.id)}>\n                {user.userName}\n              </div>\n            </NavLink>\n        </Card>\n      ))}\n    </>\n  );\n};\n\nexport default UsersDialog;\n","import React from \"react\";\nimport styles from \"../../../../styles/Dialogs.module.scss\";\nimport Moment from \"react-moment\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { DeleteFilled } from \"@ant-design/icons\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\n\nconst Messages = ({ myId, ...props }) => {\n  let messageItem = props.userMessages.items || [];\n\n  // console.log(props.openUserDialogsId);\n  return (\n    <Card className={styles.cardMessage}>\n      <div style={{ height: \"86vh\" }}>\n        <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\n          {messageItem.map(item => (\n            <div key={item.id} className={`${styles.message}`}>\n              <Card\n                className={`${\n                  item.senderId === myId\n                    ? styles.message_right\n                    : styles.message_left\n                } ${\n                  item.isSelect\n                    ? `${styles.message_card_select} ${styles.message_card}`\n                    : styles.message_card\n                }`}\n                onClick={() => props.selectMessageThunk(item.id)}\n              >\n                {item.body.replace(\"<br />\", \"\")}\n                {item.isSelect && item.senderId === myId && (\n                  <span>\n                    <DeleteFilled\n                      className={styles.message_delete}\n                      onClick={() => props.deleteMessageThunk(item)}\n                    />\n                  </span>\n                )}\n\n                <Moment\n                  format=\"DD-MM-YYYY HH:mm\"\n                  className={\n                    item.senderId === myId\n                      ? styles.message_data_right\n                      : styles.message_data_left\n                  }\n                >\n                  {item.addedAt}\n                </Moment>\n                {item.senderId === myId && !item.viewed && (\n                  <div className={styles.message_viewed}>не прочитано</div>\n                )}\n              </Card>\n            </div>\n          ))}\n        </Scrollbars>\n      </div>\n      {messageItem.length > 0 && (\n        <NewMessageFormRedux\n          sendMessageThunk={props.sendMessageThunk}\n          userId={props.openUserDialogsId}\n        />\n      )}\n    </Card>\n  );\n};\n\nconst NewMessageForm = props => {\n  const submit = async (message, dispatch) => {\n    await props.sendMessageThunk(props.userId, message.newMessage);\n    dispatch(props.reset(\"newMessage\"));\n  };\n\n  return (\n    <form onSubmit={props.handleSubmit(submit)}>\n      <div className={styles.input}>\n        <Field\n          name=\"newMessage\"\n          component=\"textarea\"\n          placeholder=\" Введите сообщение\"\n        />\n        <Button variant=\"secondary\" type=\"submit\">\n          Ok\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst NewMessageFormRedux = reduxForm({ form: \"newMessage\" })(NewMessageForm);\n\nexport default Messages;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport styles from \"../../../styles/Dialogs.module.scss\";\nimport { getAllDialogsThunk, getUserMessagesThunk, UserMessagesType, sendMessageThunk, deleteMessageThunk, selectMessageThunk, MessagesType } from \"../../../redux/reduceDialogs\";\nimport { UserInfoType } from '../../../redux/reduceDialogs'\nimport { GlobalStateType } from \"../../../redux/reduxStore\";\nimport UsersDialog from \"./UsersDialog/UsersDialog\";\nimport Messages from \"./Messages/Messages\";\n\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\nclass DialogsContainer extends React.Component<PropsType> {\n  //@ts-ignore\n  userId = this.props.match.params.userId\n  componentDidMount() {\n    this.props.getAllDialogsThunk();\n    if (this.userId) {\n      this.props.getUserMessagesThunk(this.userId)\n    }\n  }\n\n  componentDidUpdate() {\n\n    console.log()\n  }\n\n  render() {\n    return (\n      <div className={styles.dialogsPage}>\n        <div>\n          <UsersDialog userInfo={this.props.usersInfo} userMessages={this.props.getUserMessagesThunk}/>\n        </div>\n\n        <div>\n          <Messages\n            userMessages={this.props.userMessages}\n            openUserDialogsId={this.props.openUserDialogsId}\n            myId={this.props.myId}\n            sendMessageThunk={this.props.sendMessageThunk}\n            selectMessageThunk={this.props.selectMessageThunk}\n            deleteMessageThunk={this.props.deleteMessageThunk} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\ntype MapStateToPropsType = {\n  usersInfo: Array<UserInfoType>\n  userMessages: UserMessagesType\n  openUserDialogsId: number \n  myId: number | null\n}\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\n  return {\n    usersInfo: state.messagesPage.usersInfo,\n    userMessages: state.messagesPage.userMessages,\n    openUserDialogsId: state.messagesPage.openUserDialogsId,\n    myId: state.auth.userId\n  };\n};\n\ntype MapDispatchToPropsType = {\n  getAllDialogsThunk: () => void\n  getUserMessagesThunk: (userId: number) => void\n  sendMessageThunk: (userId: number, message: string) => void\n  deleteMessageThunk: (message: MessagesType) => void\n  selectMessageThunk: (messageId: string) => void\n}\nexport default compose(\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps,\n    {\n      getAllDialogsThunk,\n      getUserMessagesThunk,\n      sendMessageThunk,\n      deleteMessageThunk,\n      selectMessageThunk\n    }),\n  withRouter,\n  withAuthRedirect\n)(DialogsContainer);\n"],"sourceRoot":""}