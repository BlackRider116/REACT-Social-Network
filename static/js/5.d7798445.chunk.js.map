{"version":3,"sources":["assets/image/avatarDefault.jpg","hoc/withAuthRedirect.js","styles/Dialogs.module.scss","components/Dialogs/UsersDialog/UsersDialog.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","UsersDialog","Card","className","styles","cardDialogs","style","width","height","usersInfo","map","user","key","id","openUserDialogsId","dialogUser","dialogUser_active","dialogUser_Item","alt","src","photos","small","avatarDefault","onClick","onUserMessages","userName","fontSize","format","lastUserActivityDate","hasNewMessages","textAlign","color","newMessagesCount","NewMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","message","dispatch","sendMessageThunk","newMessage","reset","input","Field","name","component","placeholder","Button","variant","type","Messages","myId","messageItem","userMessages","items","item","senderId","message_right","message_left","isSelect","message_card_select","message_card","selectMessageThunk","body","replace","DeleteFilled","message_delete","deleteMessageThunk","message_data_right","message_data_left","addedAt","viewed","message_viewed","DialogsContainer","getAllDialogsThunk","getUserMessagesThunk","Preloader","length","dialogsPage","compose","messagesPage","userId"],"mappings":"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","file":"static/js/5.d7798445.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatarDefault.6c93098b.jpg\";","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__23ifj\",\"cardDialogs\":\"Dialogs_cardDialogs__3htim\",\"dialogUser\":\"Dialogs_dialogUser__b2-SC\",\"dialogUser_active\":\"Dialogs_dialogUser_active__1GrLi\",\"dialogUser_Item\":\"Dialogs_dialogUser_Item__1ZLnY\",\"activeName\":\"Dialogs_activeName__ffLbz\",\"message\":\"Dialogs_message__3Cau9\",\"message_card\":\"Dialogs_message_card__3xRak\",\"message_card_select\":\"Dialogs_message_card_select__1ObIq\",\"message_delete\":\"Dialogs_message_delete__9ACP-\",\"message_left\":\"Dialogs_message_left__nKhIq\",\"message_right\":\"Dialogs_message_right__3st-y\",\"message_data_right\":\"Dialogs_message_data_right__3Eb1J\",\"message_data_left\":\"Dialogs_message_data_left__3jSu2\",\"message_viewed\":\"Dialogs_message_viewed__2OB_T\",\"input\":\"Dialogs_input__37LGi\"};","import React from \"react\";\r\nimport styles from \"../../../styles/Dialogs.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport avatarDefault from \"../../../assets/image/avatarDefault.jpg\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport Moment from \"react-moment\";\r\nimport { UserInfoType } from \"../../../redux/reducers/reduceDialogs\";\r\n\r\ntype PropsType = {\r\n  usersInfo: Array<UserInfoType> \r\n  onUserMessages: (userId: number) => void\r\n  openUserDialogsId: number\r\n}\r\n\r\nconst UsersDialog: React.FC<PropsType> = props => {\r\n  return (\r\n    <Card className={styles.cardDialogs}>\r\n      <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\r\n        {props.usersInfo.map(user => (\r\n          <Card\r\n            key={user.id}\r\n            className={\r\n              props.openUserDialogsId === user.id\r\n                ? `${styles.dialogUser} ${styles.dialogUser_active}`\r\n                : styles.dialogUser\r\n            }\r\n          >\r\n            <div className={styles.dialogUser_Item}>\r\n              <NavLink to={`/profile/${user.id}`}>\r\n                <img\r\n                  alt={'user.id'}\r\n                  src={user.photos.small ? user.photos.small : avatarDefault}\r\n                />\r\n              </NavLink>\r\n              <NavLink\r\n                to={`/dialogs/${user.id}`}\r\n                onClick={() => props.onUserMessages(user.id)}\r\n              >\r\n                <div>{user.userName}</div>\r\n\r\n                <div style={{ fontSize: \"14px\" }}>\r\n                  {\"Был(a): \"}\r\n                  <Moment\r\n                    format=\"DD-MM-YYYY HH:mm\"\r\n                    style={{ fontSize: \"12px\" }}\r\n                  >\r\n                    {user.lastUserActivityDate}\r\n                  </Moment>\r\n                </div>\r\n                {user.hasNewMessages && (\r\n                  <span\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      textAlign: \"center\",\r\n                      color: \"red\"\r\n                    }}\r\n                  >\r\n                    Новых сообщений: {user.newMessagesCount}\r\n                  </span>\r\n                )}\r\n              </NavLink>\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </Scrollbars>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default UsersDialog;\r\n","import React, { Dispatch } from \"react\";\r\nimport styles from \"../../../styles/Dialogs.module.scss\";\r\nimport Moment from \"react-moment\";\r\nimport { Field, reduxForm, InjectedFormProps, reset } from \"redux-form\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { DeleteFilled } from \"@ant-design/icons\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { UserMessagesType, MessagesType } from \"../../../redux/reducers/reduceDialogs\";\r\n\r\ntype PropsType = {\r\n  myId: number | null\r\n  userMessages: UserMessagesType\r\n  openUserDialogsId: number\r\n  sendMessageThunk: (userId: number, message: string) => void\r\n  deleteMessageThunk: (message: MessagesType) => void\r\n  selectMessageThunk: (messageId: string) => void\r\n}\r\n\r\nconst Messages: React.FC<PropsType> = ({ myId, ...props }) => {\r\n  const messageItem = props.userMessages.items || [];\r\n\r\n  return (\r\n    <Card className={styles.cardDialogs}>\r\n      <div style={{ height: \"86vh\" }}>\r\n        <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\r\n          {messageItem.map(item => (\r\n            <div key={item.id} className={`${styles.message}`}>\r\n              <Card\r\n                className={`${\r\n                  item.senderId === myId\r\n                    ? styles.message_right\r\n                    : styles.message_left\r\n                  } ${\r\n                  item.isSelect\r\n                    ? `${styles.message_card_select} ${styles.message_card}`\r\n                    : styles.message_card\r\n                  }`}\r\n                onClick={() => props.selectMessageThunk(item.id)}\r\n              >\r\n                <div>\r\n                  {item.body.replace(\"<br />\", \"\")}\r\n                  {item.isSelect && item.senderId === myId && (\r\n                    <span>\r\n                      <DeleteFilled\r\n                        className={styles.message_delete}\r\n                        onClick={() => props.deleteMessageThunk(item)}\r\n                      />\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <Moment\r\n                  format=\"DD-MM-YYYY HH:mm\"\r\n                  className={\r\n                    item.senderId === myId\r\n                      ? styles.message_data_right\r\n                      : styles.message_data_left\r\n                  }\r\n                >\r\n                  {item.addedAt}\r\n                </Moment>\r\n                {item.senderId === myId && !item.viewed && (\r\n                  <div className={styles.message_viewed}>не прочитано</div>\r\n                )}\r\n              </Card>\r\n            </div>\r\n          ))}\r\n        </Scrollbars>\r\n      </div>\r\n      {props.openUserDialogsId !== -1 && (\r\n        <NewMessageFormRedux\r\n          openUserDialogsId={props.openUserDialogsId}\r\n          sendMessageThunk={props.sendMessageThunk}\r\n        />\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\ntype BodyValuesType = { newMessage: string }\r\ntype FormType = {\r\n  openUserDialogsId: number\r\n  sendMessageThunk: (userId: number, message: string) => void\r\n}\r\nconst NewMessageForm: React.FC<InjectedFormProps<BodyValuesType, FormType> & FormType> = props => {\r\n  const submit = (message: BodyValuesType, dispatch: Dispatch<{}>) => {\r\n    props.sendMessageThunk(props.openUserDialogsId, message.newMessage);\r\n    dispatch(reset(\"newMessage\"));\r\n  };\r\n  return (\r\n    <form onSubmit={props.handleSubmit(submit)}>\r\n      <div className={styles.input}>\r\n        <Field\r\n          name=\"newMessage\"\r\n          component=\"textarea\"\r\n          placeholder=\" Введите сообщение\"\r\n        />\r\n        <Button variant=\"secondary\" type=\"submit\">\r\n          Ok\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst NewMessageFormRedux = reduxForm<BodyValuesType, FormType>({ form: \"newMessage\" })(NewMessageForm);\r\n\r\nexport default Messages;\r\n","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport styles from \"../../styles/Dialogs.module.scss\";\r\nimport { getAllDialogsThunk, getUserMessagesThunk, UserMessagesType, sendMessageThunk, deleteMessageThunk, selectMessageThunk, MessagesType } from \"../../redux/reducers/reduceDialogs\";\r\nimport { UserInfoType } from '../../redux/reducers/reduceDialogs'\r\nimport { GlobalStateType } from \"../../redux/reduxStore\";\r\nimport UsersDialog from \"./UsersDialog/UsersDialog\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\nclass DialogsContainer extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    this.props.getAllDialogsThunk();\r\n    if (this.props.openUserDialogsId !== -1) {\r\n      this.props.getUserMessagesThunk(this.props.openUserDialogsId)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.getUserMessagesThunk(-1)\r\n  }\r\n\r\n  render() {\r\n    if (this.props.usersInfo === null) return <Preloader />\r\n    if (this.props.usersInfo.length === 0) return <Card style={{ textAlign: 'center', fontSize: '20px', height: '100px' }}>\r\n      У Вас нет начатых диалогов. Чтобы начать диалог перейдите на страницу<NavLink to=\"/users\"> пользователей</NavLink>\r\n    </Card>\r\n    return (\r\n      <div className={styles.dialogsPage}>\r\n        <div>\r\n          <UsersDialog\r\n            usersInfo={this.props.usersInfo}\r\n            onUserMessages={this.props.getUserMessagesThunk}\r\n            openUserDialogsId={this.props.openUserDialogsId} />\r\n        </div>\r\n\r\n        <div>\r\n          <Messages\r\n            userMessages={this.props.userMessages}\r\n            openUserDialogsId={this.props.openUserDialogsId}\r\n            myId={this.props.myId}\r\n            sendMessageThunk={this.props.sendMessageThunk}\r\n            selectMessageThunk={this.props.selectMessageThunk}\r\n            deleteMessageThunk={this.props.deleteMessageThunk} />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  usersInfo: Array<UserInfoType> | null\r\n  userMessages: UserMessagesType\r\n  openUserDialogsId: number\r\n  myId: number | null\r\n}\r\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\r\n  return {\r\n    usersInfo: state.messagesPage.usersInfo,\r\n    userMessages: state.messagesPage.userMessages,\r\n    openUserDialogsId: state.messagesPage.openUserDialogsId,\r\n    myId: state.auth.userId\r\n  };\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  getAllDialogsThunk: () => void\r\n  getUserMessagesThunk: (userId: number) => void\r\n  sendMessageThunk: (userId: number, message: string) => void\r\n  deleteMessageThunk: (message: MessagesType) => void\r\n  selectMessageThunk: (messageId: string) => void\r\n}\r\nexport default compose<ComponentType<{}>>(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps, {\r\n    getAllDialogsThunk,\r\n    getUserMessagesThunk,\r\n    sendMessageThunk,\r\n    deleteMessageThunk,\r\n    selectMessageThunk\r\n  }),\r\n  withAuthRedirect\r\n)(DialogsContainer);\r\n"],"sourceRoot":""}