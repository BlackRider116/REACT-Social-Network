{"version":3,"sources":["assets/image/avatarDefault.jpg","hoc/withAuthRedirect.js","styles/Dialogs.module.scss","components/Dialogs/UsersDialog/UsersDialog.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","UsersDialog","Card","className","styles","cardDialogs","style","width","height","usersInfo","map","user","key","id","openUserDialogsId","dialogUser","dialogUser_active","dialogUser_Item","alt","src","photos","small","avatarDefault","onClick","onUserMessages","userName","fontSize","format","lastUserActivityDate","hasNewMessages","textAlign","color","newMessagesCount","NewMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","message","dispatch","sendMessageThunk","newMessage","reset","input","Field","name","component","placeholder","Button","variant","type","Messages","myId","messageItem","userMessages","items","item","senderId","message_right","message_left","isSelect","message_card_select","message_card","selectMessageThunk","body","replace","DeleteFilled","message_delete","deleteMessageThunk","message_data_right","message_data_left","addedAt","viewed","message_viewed","DialogsContainer","getAllDialogsThunk","getUserMessagesThunk","Preloader","length","dialogsPage","compose","messagesPage","userId"],"mappings":"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","file":"static/js/5.ae007358.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatarDefault.6c93098b.jpg\";","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__Vj-n5\",\"cardDialogs\":\"Dialogs_cardDialogs__1uSuo\",\"dialogUser\":\"Dialogs_dialogUser__3ZW-R\",\"dialogUser_active\":\"Dialogs_dialogUser_active__Gv5WR\",\"dialogUser_Item\":\"Dialogs_dialogUser_Item__3Msgq\",\"activeName\":\"Dialogs_activeName__2eTHX\",\"message\":\"Dialogs_message__2tLdL\",\"message_card\":\"Dialogs_message_card__3_tVC\",\"message_card_select\":\"Dialogs_message_card_select__3US-J\",\"message_delete\":\"Dialogs_message_delete__347JM\",\"message_left\":\"Dialogs_message_left__3qHEf\",\"message_right\":\"Dialogs_message_right__2SbB4\",\"message_data_right\":\"Dialogs_message_data_right__OoqIP\",\"message_data_left\":\"Dialogs_message_data_left__1MamM\",\"message_viewed\":\"Dialogs_message_viewed__275qw\",\"input\":\"Dialogs_input__Ed3Pc\"};","import React from \"react\";\nimport styles from \"../../../styles/Dialogs.module.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport avatarDefault from \"../../../assets/image/avatarDefault.jpg\";\nimport { Card } from \"react-bootstrap\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport Moment from \"react-moment\";\nimport { UserInfoType } from \"../../../redux/reducers/reduceDialogs\";\n\ntype PropsType = {\n  usersInfo: Array<UserInfoType> \n  onUserMessages: (userId: number) => void\n  openUserDialogsId: number\n}\n\nconst UsersDialog: React.FC<PropsType> = props => {\n  return (\n    <Card className={styles.cardDialogs}>\n      <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\n        {props.usersInfo.map(user => (\n          <Card\n            key={user.id}\n            className={\n              props.openUserDialogsId === user.id\n                ? `${styles.dialogUser} ${styles.dialogUser_active}`\n                : styles.dialogUser\n            }\n          >\n            <div className={styles.dialogUser_Item}>\n              <NavLink to={`/profile/${user.id}`}>\n                <img\n                  alt={'user.id'}\n                  src={user.photos.small ? user.photos.small : avatarDefault}\n                />\n              </NavLink>\n              <NavLink\n                to={`/dialogs/${user.id}`}\n                onClick={() => props.onUserMessages(user.id)}\n              >\n                <div>{user.userName}</div>\n\n                <div style={{ fontSize: \"14px\" }}>\n                  {\"Был(a): \"}\n                  <Moment\n                    format=\"DD-MM-YYYY HH:mm\"\n                    style={{ fontSize: \"12px\" }}\n                  >\n                    {user.lastUserActivityDate}\n                  </Moment>\n                </div>\n                {user.hasNewMessages && (\n                  <span\n                    style={{\n                      fontSize: \"14px\",\n                      textAlign: \"center\",\n                      color: \"red\"\n                    }}\n                  >\n                    Новых сообщений: {user.newMessagesCount}\n                  </span>\n                )}\n              </NavLink>\n            </div>\n          </Card>\n        ))}\n      </Scrollbars>\n    </Card>\n  );\n};\n\nexport default UsersDialog;\n","import React, { Dispatch } from \"react\";\nimport styles from \"../../../styles/Dialogs.module.scss\";\nimport Moment from \"react-moment\";\nimport { Field, reduxForm, InjectedFormProps, reset } from \"redux-form\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { DeleteFilled } from \"@ant-design/icons\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport { UserMessagesType, MessagesType } from \"../../../redux/reducers/reduceDialogs\";\n\ntype PropsType = {\n  myId: number | null\n  userMessages: UserMessagesType\n  openUserDialogsId: number\n  sendMessageThunk: (userId: number, message: string) => void\n  deleteMessageThunk: (message: MessagesType) => void\n  selectMessageThunk: (messageId: string) => void\n}\n\nconst Messages: React.FC<PropsType> = ({ myId, ...props }) => {\n  const messageItem = props.userMessages.items || [];\n\n  return (\n    <Card className={styles.cardDialogs}>\n      <div style={{ height: \"86vh\" }}>\n        <Scrollbars style={{ width: \"100%\", height: \"100%\" }}>\n          {messageItem.map(item => (\n            <div key={item.id} className={`${styles.message}`}>\n              <Card\n                className={`${\n                  item.senderId === myId\n                    ? styles.message_right\n                    : styles.message_left\n                  } ${\n                  item.isSelect\n                    ? `${styles.message_card_select} ${styles.message_card}`\n                    : styles.message_card\n                  }`}\n                onClick={() => props.selectMessageThunk(item.id)}\n              >\n                <div>\n                  {item.body.replace(\"<br />\", \"\")}\n                  {item.isSelect && item.senderId === myId && (\n                    <span>\n                      <DeleteFilled\n                        className={styles.message_delete}\n                        onClick={() => props.deleteMessageThunk(item)}\n                      />\n                    </span>\n                  )}\n                </div>\n\n                <Moment\n                  format=\"DD-MM-YYYY HH:mm\"\n                  className={\n                    item.senderId === myId\n                      ? styles.message_data_right\n                      : styles.message_data_left\n                  }\n                >\n                  {item.addedAt}\n                </Moment>\n                {item.senderId === myId && !item.viewed && (\n                  <div className={styles.message_viewed}>не прочитано</div>\n                )}\n              </Card>\n            </div>\n          ))}\n        </Scrollbars>\n      </div>\n      {props.openUserDialogsId !== -1 && (\n        <NewMessageFormRedux\n          openUserDialogsId={props.openUserDialogsId}\n          sendMessageThunk={props.sendMessageThunk}\n        />\n      )}\n    </Card>\n  );\n};\n\n\ntype BodyValuesType = { newMessage: string }\ntype FormType = {\n  openUserDialogsId: number\n  sendMessageThunk: (userId: number, message: string) => void\n}\nconst NewMessageForm: React.FC<InjectedFormProps<BodyValuesType, FormType> & FormType> = props => {\n  const submit = (message: BodyValuesType, dispatch: Dispatch<{}>) => {\n    props.sendMessageThunk(props.openUserDialogsId, message.newMessage);\n    dispatch(reset(\"newMessage\"));\n  };\n  return (\n    <form onSubmit={props.handleSubmit(submit)}>\n      <div className={styles.input}>\n        <Field\n          name=\"newMessage\"\n          component=\"textarea\"\n          placeholder=\" Введите сообщение\"\n        />\n        <Button variant=\"secondary\" type=\"submit\">\n          Ok\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst NewMessageFormRedux = reduxForm<BodyValuesType, FormType>({ form: \"newMessage\" })(NewMessageForm);\n\nexport default Messages;\n","import React, { ComponentType } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport styles from \"../../styles/Dialogs.module.scss\";\nimport { getAllDialogsThunk, getUserMessagesThunk, UserMessagesType, sendMessageThunk, deleteMessageThunk, selectMessageThunk, MessagesType } from \"../../redux/reducers/reduceDialogs\";\nimport { UserInfoType } from '../../redux/reducers/reduceDialogs'\nimport { GlobalStateType } from \"../../redux/reduxStore\";\nimport UsersDialog from \"./UsersDialog/UsersDialog\";\nimport Messages from \"./Messages/Messages\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport { Card } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\n\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\nclass DialogsContainer extends React.Component<PropsType> {\n  componentDidMount() {\n    this.props.getAllDialogsThunk();\n    if (this.props.openUserDialogsId !== -1) {\n      this.props.getUserMessagesThunk(this.props.openUserDialogsId)\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.getUserMessagesThunk(-1)\n  }\n\n  render() {\n    if (this.props.usersInfo === null) return <Preloader />\n    if (this.props.usersInfo.length === 0) return <Card style={{ textAlign: 'center', fontSize: '20px', height: '100px' }}>\n      У Вас нет начатых диалогов. Чтобы начать диалог перейдите на страницу<NavLink to=\"/users\"> пользователей</NavLink>\n    </Card>\n    return (\n      <div className={styles.dialogsPage}>\n        <div>\n          <UsersDialog\n            usersInfo={this.props.usersInfo}\n            onUserMessages={this.props.getUserMessagesThunk}\n            openUserDialogsId={this.props.openUserDialogsId} />\n        </div>\n\n        <div>\n          <Messages\n            userMessages={this.props.userMessages}\n            openUserDialogsId={this.props.openUserDialogsId}\n            myId={this.props.myId}\n            sendMessageThunk={this.props.sendMessageThunk}\n            selectMessageThunk={this.props.selectMessageThunk}\n            deleteMessageThunk={this.props.deleteMessageThunk} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\ntype MapStateToPropsType = {\n  usersInfo: Array<UserInfoType> | null\n  userMessages: UserMessagesType\n  openUserDialogsId: number\n  myId: number | null\n}\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\n  return {\n    usersInfo: state.messagesPage.usersInfo,\n    userMessages: state.messagesPage.userMessages,\n    openUserDialogsId: state.messagesPage.openUserDialogsId,\n    myId: state.auth.userId\n  };\n};\n\ntype MapDispatchToPropsType = {\n  getAllDialogsThunk: () => void\n  getUserMessagesThunk: (userId: number) => void\n  sendMessageThunk: (userId: number, message: string) => void\n  deleteMessageThunk: (message: MessagesType) => void\n  selectMessageThunk: (messageId: string) => void\n}\nexport default compose<ComponentType<{}>>(\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps, {\n    getAllDialogsThunk,\n    getUserMessagesThunk,\n    sendMessageThunk,\n    deleteMessageThunk,\n    selectMessageThunk\n  }),\n  withAuthRedirect\n)(DialogsContainer);\n"],"sourceRoot":""}