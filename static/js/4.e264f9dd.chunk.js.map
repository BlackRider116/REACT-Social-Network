{"version":3,"sources":["assets/image/avatarDefault.jpg","styles/Profile.module.scss","hoc/withAuthRedirect.js","../node_modules/@ant-design/icons-svg/es/asn/DeleteFilled.js","../node_modules/@ant-design/icons/es/icons/DeleteFilled.js","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileUserInfo.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DeleteFilled","ref","AntdIcon","Object","assign","icon","DeleteFilledSvg","displayName","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","className","styles","profileInfoItem","style","cursor","placeholder","onChange","event","currentTarget","value","onBlur","setTimeout","autoFocus","onClick","updateUserStatus","status__text","isOwner","ReduxProfileInfoForm","reduxForm","form","profile","error","onSubmit","handleSubmit","type","saveProfileBtn","display","errorText","stylesProfile","inputStyle_Name","fieldValue","required","undefined","inputStyle","keys","contacts","map","contact","key","alignItems","ReduxProfileInfoFormAboutMe","aboutMe","ProfileUserInfo","marginLeft","ProfileAboutMe","width","lookingForAJob","color","lookingForAJobDescription","ProfileInfo","profileUpdate","editModeName","setEditModeName","editModeAboutMe","setEditModeAboutMe","formData","saveProfile","fileUpload","createRef","profileInfoCard","profileInfo","src","photos","large","avatarDefault","alt","target","files","length","savePhoto","marginTop","isFollow","Button","variant","onFollowThunk","userId","startDialogThunk","paddingTop","current","click","DropdownButton","as","ButtonGroup","id","title","Dropdown","Item","margin","fullName","initialValues","MyPosts","posts","Card","classes","profilePost","profilePostItem","avaPhoto","postText","profilePostLikes","likes","likeDislikeMyPost","float","deleteMyPost","MyPostFormRedux","myPosts","Field","name","component","compose","profilePage","small","addNewPost","actionsProfile","deleteAllMyPosts","withRouter","post","match","params","localStorage","setItem","JSON","stringify","dispatch","newPost","reset","marginBottom","deleteLocalStorage","removeItem","Profile","global","Preloader","ProfileContainer","getProfileThunk","Number","getUserStatus","authUserId","userProfileId","prevState","url"],"mappings":"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","file":"static/js/4.e264f9dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatarDefault.6c93098b.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"global\":\"Profile_global__31cT2\",\"profileInfoCard\":\"Profile_profileInfoCard__LeQYc\",\"profileInfo\":\"Profile_profileInfo__2sBOv\",\"status__text\":\"Profile_status__text__3zloh\",\"profilePost\":\"Profile_profilePost__21OrU\",\"profilePostItem\":\"Profile_profilePostItem__3Jhm2\",\"profilePostLikes\":\"Profile_profilePostLikes__3ZMLk\",\"deleteLocalStorage\":\"Profile_deleteLocalStorage__11Xy8\",\"myPosts\":\"Profile_myPosts__2Qh9v\",\"inputStyle_Name\":\"Profile_inputStyle_Name__3uY8-\",\"inputStyle\":\"Profile_inputStyle__3ciuo\",\"aboutMe\":\"Profile_aboutMe__2etLU\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// This icon file is generated automatically.\n// tslint:disable\nvar DeleteFilled = { \"name\": \"delete\", \"theme\": \"filled\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M864 256H736v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zm-200 0H360v-72h304v72z\" } }] } };\nexport default DeleteFilled;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DeleteFilledSvg from \"@ant-design/icons-svg/es/asn/DeleteFilled\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DeleteFilled = function DeleteFilled(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: DeleteFilledSvg\n  }));\n};\n\nDeleteFilled.displayName = 'DeleteFilled';\nexport default React.forwardRef(DeleteFilled);","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport styles from \"../../../styles/Profile.module.scss\";\r\n\r\n\r\ntype PropsType = {\r\n  status: string\r\n  isOwner: number | undefined\r\n  updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = props => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activatedEditMode = () => {\r\n    if (!props.isOwner) {\r\n      setEditMode(true);\r\n    }\r\n  };\r\n  const deactivatedEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateUserStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(event.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.profileInfoItem}>\r\n      {!editMode ? (\r\n        <div className={styles.status__text}\r\n          onClick={activatedEditMode}\r\n        >\r\n          {props.status}\r\n        </div>\r\n      ) : (\r\n          <div style={{ cursor: \"pointer\" }}>\r\n            <input  \r\n              placeholder=\"Введите Ваш статус\"\r\n              onChange={onStatusChange}\r\n              onBlur={() => {\r\n                setTimeout(() => {\r\n                  setEditMode(false);\r\n                }, 500);\r\n              }}\r\n              autoFocus={true}\r\n              value={status}\r\n            /> \r\n            <button onClick={deactivatedEditMode}>OK</button>\r\n          </div>\r\n        )} \r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport styles from \"../../../common/FormControl/FormControl.module.css\";\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { fieldValue } from \"../../../common/FormControl/FormControl\";\r\nimport { required } from \"../../../utilities/validation/validation\";\r\nimport stylesProfile from \"../../../styles/Profile.module.scss\";\r\nimport { ProfileType } from \"../../../redux/reducers/reduceProfile\";\r\n\r\ntype OwnPropsFormType = {\r\n  saveProfileBtn: React.RefObject<HTMLButtonElement>\r\n  initialValues: ProfileType\r\n  profile: ProfileType\r\n}\r\n\r\nconst ProfileInfoForm: React.FC<InjectedFormProps<ProfileType, OwnPropsFormType> & OwnPropsFormType> = ({ profile, error, ...props }) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <button\r\n        type=\"submit\"\r\n        ref={props.saveProfileBtn}\r\n        style={{ display: \"none\" }}\r\n      >\r\n        Сохранить\r\n      </button>\r\n      <div>{error && <div className={styles.errorText}>{error}</div>}</div>\r\n\r\n      <div>\r\n        <div className={stylesProfile.inputStyle_Name}>\r\n          <b>Полное имя: </b>\r\n          <div>\r\n            {fieldValue(\r\n              required,\r\n              \"fullName\",\r\n              \"input\",\r\n              undefined,\r\n              undefined,\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={stylesProfile.inputStyle}>\r\n          <b>Контакты: </b>\r\n          <div>\r\n            {Object.keys(profile.contacts).map(contact => {\r\n              return (\r\n                <span\r\n                  key={contact}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\"\r\n                  }}\r\n                >\r\n                  <b>{contact}: </b>\r\n                  {fieldValue(\r\n                    [],\r\n                    \"contacts.\" + contact,\r\n                    \"input\",\r\n                    contact,\r\n                    undefined\r\n                  )}\r\n                </span>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const ReduxProfileInfoForm = reduxForm<ProfileType, OwnPropsFormType>({ form: \"profileUserInfo\" })(ProfileInfoForm)\r\n\r\nexport const ProfileInfoFormAboutMe: React.FC<InjectedFormProps<ProfileType, OwnPropsFormType> & OwnPropsFormType> = ({ profile, error, ...props }) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <button\r\n        type=\"submit\"\r\n        ref={props.saveProfileBtn}\r\n        style={{ display: \"none\" }}\r\n      >\r\n        Сохранить\r\n      </button>\r\n      <span>{error && <span className={styles.errorText}>{error}</span>}</span>\r\n      <div className={stylesProfile.aboutMe}>\r\n        <div>\r\n          <b>Обо мне: </b>\r\n          {fieldValue(required, \"aboutMe\", undefined, undefined, undefined)}\r\n        </div>\r\n\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <b>В поиске работы: </b>{\" \"}\r\n          {fieldValue([], \"lookingForAJob\", \"input\", undefined, \"checkbox\")}\r\n        </div>\r\n\r\n        <div>\r\n          <b>Мой скилл: </b>\r\n          {fieldValue(required, \"lookingForAJobDescription\", undefined, undefined, undefined)}\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const ReduxProfileInfoFormAboutMe = reduxForm<ProfileType, OwnPropsFormType>({ form: \"profileUserInfoAboutMe\" })(ProfileInfoFormAboutMe);\r\n\r\ntype ProfileUserInfoType = {\r\n  contacts: KeysType\r\n}\r\n\r\ntype KeysType = {\r\n    skype: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    icq: string | null\r\n    email: string | null\r\n    googlePlus: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    whatsApp: string | null\r\n}\r\n\r\nexport const ProfileUserInfo: React.FC<ProfileUserInfoType> = ({ contacts }) => {\r\n  return (\r\n    <div>\r\n      <b>Контакты: </b>\r\n      {Object.keys(contacts).map((contact) => {\r\n        return (\r\n          <div key={contact} style={{ marginLeft: \"15px\" }}>\r\n            {contacts[contact as keyof KeysType] !== null &&\r\n              contacts[contact as keyof KeysType] !== \"\" && (\r\n                <div>\r\n                  <b>{contact}: </b>\r\n                  {contacts[contact as keyof KeysType]}\r\n                </div>\r\n              )}\r\n          </div>\r\n        );\r\n      })} \r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileAboutMeType = {\r\n  aboutMe: string | null\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string | null\r\n}\r\n\r\nexport const ProfileAboutMe: React.FC<ProfileAboutMeType> = (props) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <b>Обо мне: </b>\r\n        <div style={{ marginLeft: \"10px\", width: \"60%\" }}>\r\n          {props.aboutMe}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <b>В поиске работы: </b>\r\n        <h5 style={{ marginLeft: \"10px\" }}>\r\n          {props.lookingForAJob ? (\r\n            <span style={{ color: \"green\" }}>Yes</span>\r\n          ) : (\r\n              <span style={{ color: \"red\" }}>No</span>\r\n            )}\r\n        </h5>\r\n      </div>\r\n\r\n      <div>\r\n        <b>Мои скиллы: </b>\r\n        <div style={{ marginLeft: \"10px\", width: \"60%\" }}>\r\n          {props.lookingForAJobDescription}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport avatarDefault from \"../../../assets/image/avatarDefault.jpg\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport styles from \"../../../styles/Profile.module.scss\";\r\nimport {\r\n  ReduxProfileInfoForm,\r\n  ProfileUserInfo,\r\n  ProfileAboutMe,\r\n  ReduxProfileInfoFormAboutMe\r\n} from \"./ProfileUserInfo\";\r\nimport { Button, Dropdown, DropdownButton, ButtonGroup } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { ProfileType } from \"../../../redux/reducers/reduceProfile\";\r\n\r\ntype PropsType = {\r\n  isOwner: number | undefined\r\n  profileUpdate: boolean | null\r\n  profile: ProfileType\r\n  isFollow: boolean\r\n  status: string\r\n\r\n  onFollowThunk: (userId: number, isFollow: boolean) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (formData: ProfileType) => void\r\n  updateUserStatus: (status: string) => void\r\n  startDialogThunk: (userId: number) => void\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profileUpdate, ...props }) => {\r\n\r\n  const photoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files !== null && event.target.files.length) {\r\n      props.savePhoto(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const [editModeName, setEditModeName] = useState(false);\r\n  const [editModeAboutMe, setEditModeAboutMe] = useState(false);\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    if (formData !== props.profile) {\r\n      props.saveProfile(formData);\r\n    } else if (profileUpdate !== false) {\r\n      setEditModeName(false);\r\n      setEditModeAboutMe(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (profileUpdate === true) {\r\n      setEditModeName(false);\r\n      setEditModeAboutMe(false);\r\n    }\r\n  }, [profileUpdate]);\r\n\r\n  const fileUpload: React.RefObject<HTMLInputElement> = React.createRef();\r\n  const saveProfileBtn: React.RefObject<HTMLButtonElement> = React.createRef();\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.profileInfoCard}>\r\n        <div className={styles.profileInfo}>\r\n          <img\r\n            src={props.profile !== null && props.profile.photos.large !== null\r\n              ? props.profile.photos.large\r\n              : avatarDefault\r\n            }\r\n            alt=\"AvaPhoto\"\r\n          />\r\n          <input\r\n            ref={fileUpload}\r\n            type={\"file\"}\r\n            onChange={photoSelected}\r\n            style={{ display: \"none\" }}\r\n          />\r\n          {!props.isOwner ? (\r\n            <div style={{ paddingTop: \"3px\" }}>\r\n              <Button\r\n                style={{ width: \"250px\" }}\r\n                onClick={() => { if (fileUpload.current) fileUpload.current.click() }}\r\n                variant=\"secondary\"\r\n              >\r\n                Изменить фото\r\n              </Button>\r\n              {!props.isOwner && !editModeName && !editModeAboutMe ? (\r\n                <DropdownButton key={'DropdownButton'} as={ButtonGroup} id=\"dropdown-variant-primary\" title=\"Редактировать профиль\" style={{ marginTop: \"3px\", width: \"100%\" }}>\r\n                  <Dropdown.Item style={{ width: \"250px\" }} onClick={() => setEditModeName(true)}>Имя и контакты</Dropdown.Item>\r\n                  <Dropdown.Item style={{ width: \"250px\" }} onClick={() => setEditModeAboutMe(true)}>Обо мне</Dropdown.Item>\r\n                </DropdownButton>\r\n              ) : (\r\n                  <Button\r\n                    style={{ marginTop: \"3px\", width: \"250px\" }}\r\n                    variant=\"success\"\r\n                    onClick={() => { if (saveProfileBtn.current) saveProfileBtn.current.click() }}\r\n                  >\r\n                    Сохранить\r\n                </Button>\r\n                )}\r\n            </div>\r\n          ) : (\r\n              <div style={{ marginTop: \"5px\" }}>\r\n                <div>\r\n                  {!props.isFollow ? (\r\n                    <Button\r\n                      style={{ width: \"250px\" }}\r\n                      variant=\"success\"\r\n                      onClick={() =>\r\n                        props.onFollowThunk(props.profile.userId, props.isFollow)\r\n                      }\r\n                    >\r\n                      Подписаться\r\n                  </Button>\r\n                  ) : (\r\n                      <Button\r\n                        style={{ width: \"250px\" }}\r\n                        variant=\"danger\"\r\n                        onClick={() =>\r\n                          props.onFollowThunk(props.profile.userId, props.isFollow)\r\n                        }\r\n                      >\r\n                        Отписаться\r\n                  </Button>\r\n                    )}\r\n                </div>\r\n                <div style={{ marginTop: \"3px\" }}>\r\n                  <NavLink to={`/dialogs/${props.profile.userId}`}>\r\n                    <Button\r\n                      style={{ width: \"250px\" }}\r\n                      onClick={() => props.startDialogThunk(props.profile.userId)}\r\n                    >\r\n                      Написать сообщение\r\n                  </Button>\r\n                  </NavLink>\r\n                </div>\r\n              </div>\r\n            )}\r\n        </div>\r\n        <div style={{ margin: \"10px\" }}>\r\n          <h3>{props.profile.fullName}</h3>\r\n          <ProfileStatus\r\n            isOwner={props.isOwner}\r\n            status={props.status}\r\n            updateUserStatus={props.updateUserStatus}\r\n          />\r\n          <div style={{ marginLeft: \"10px\" }}>\r\n            {!editModeName ? (\r\n              <ProfileUserInfo contacts={props.profile.contacts} />\r\n            ) : (\r\n                <ReduxProfileInfoForm\r\n                  onSubmit={onSubmit}\r\n                  profile={props.profile}\r\n                  initialValues={props.profile}\r\n                  saveProfileBtn={saveProfileBtn}\r\n                />\r\n              )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ marginLeft: \"10px\" }}>\r\n        {!editModeAboutMe ? (\r\n          <ProfileAboutMe\r\n            aboutMe={props.profile.aboutMe}\r\n            lookingForAJob={props.profile.lookingForAJob}\r\n            lookingForAJobDescription={props.profile.lookingForAJobDescription} />\r\n        ) : (\r\n            <ReduxProfileInfoFormAboutMe\r\n              onSubmit={onSubmit}\r\n              profile={props.profile}\r\n              initialValues={props.profile}\r\n              saveProfileBtn={saveProfileBtn}\r\n            />\r\n          )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport classes from \"../../../styles/Profile.module.scss\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport { DeleteFilled } from \"@ant-design/icons\";\r\nimport avatarDefault from '../../../assets/image/avatarDefault.jpg'\r\nimport { PostType } from \"../../../redux/reducers/reduceProfile\";\r\n\r\ntype PropsType = {\r\n  avaPhoto: string | null\r\n  posts: PostType\r\n  likeDislikeMyPost: (postId: number, boolean: boolean) => void\r\n  deleteMyPost: (postId: number) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<PropsType> = ({posts, ...props}) => {\r\n  return (\r\n    <Card className={classes.profilePost}>\r\n      <div className={classes.profilePostItem}>\r\n        <img alt=\"Post\" src={props.avaPhoto !== null ? props.avaPhoto : avatarDefault } />\r\n        <span>{posts.postText}</span>\r\n      </div>\r\n      <div className={classes.profilePostLikes}>\r\n        <span>{`💗 ${posts.likes}  `}</span>\r\n        <Button\r\n          variant=\"success\"\r\n          onClick={() => props.likeDislikeMyPost(posts.id, true)}\r\n        >\r\n          <span>{\"👍\"}</span>\r\n        </Button>\r\n        <Button\r\n          variant=\"danger\"\r\n          onClick={() => props.likeDislikeMyPost(posts.id, false)}\r\n        >\r\n          <span>{\"👎\"}</span>\r\n        </Button>\r\n        <Button\r\n          variant=\"dark\"\r\n          style={{ float: \"right\" }}\r\n          onClick={() => props.deleteMyPost(posts.id)}\r\n        >\r\n          <DeleteFilled style={{ color: \"red\" }} />\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n};","import React, { ComponentType, Dispatch } from \"react\";\r\nimport classes from \"../../../styles/Profile.module.scss\";\r\nimport { MyPosts } from \"./MyPosts\";\r\nimport { Field, reduxForm, reset, InjectedFormProps } from \"redux-form\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  actionsProfile,\r\n  likeDislikeMyPost,\r\n  PostType\r\n} from \"../../../redux/reducers/reduceProfile\";\r\nimport { compose } from \"redux\";\r\nimport { GlobalStateType } from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<{ userId: string }>\r\n\r\nconst MyPostsContainer: React.FC<PropsType> = props => {\r\n  const myPosts = props.posts.map(post => (\r\n    <MyPosts\r\n      avaPhoto={props.avaPhoto}\r\n      posts={post}\r\n      key={post.id}\r\n      likeDislikeMyPost={props.likeDislikeMyPost}\r\n      deleteMyPost={props.deleteMyPost}\r\n    />\r\n  ));\r\n\r\n  const userId = props.match.params.userId\r\n\r\n  const onSubmit = (postText: BodyValuesType, dispatch: Dispatch<{}>) => {\r\n    props.addNewPost(postText.newPost, props.avaPhoto);\r\n    dispatch(reset(\"myNewPost\"));\r\n  };\r\n\r\n  localStorage.setItem(\"MyPosts\", JSON.stringify(props.posts));\r\n\r\n  return (\r\n    <>\r\n      {!userId && (\r\n        <div>\r\n          <MyPostFormRedux onSubmit={onSubmit} />\r\n          <div style={{ marginBottom: \"10px\" }}>{myPosts}</div>\r\n          <div className={classes.deleteLocalStorage}>\r\n            {props.posts.length !== 0 &&\r\n              <Button\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  localStorage.removeItem(\"MyPosts\");\r\n                  props.deleteAllMyPosts();\r\n                }}\r\n              >\r\n                Очиcтить localStorage и удалить посты\r\n            </Button>}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\ntype BodyValuesType = { newPost: string }\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<BodyValuesType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={classes.myPosts}>\r\n        <Field name=\"newPost\" component=\"textarea\" />\r\n        <Button type=\"submit\">Добавить</Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyPostFormRedux = reduxForm<BodyValuesType>({ form: \"myNewPost\" })(MyPostForm);\r\n\r\ntype MapStateToPropsType = {\r\n  posts: Array<PostType>\r\n  avaPhoto: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    avaPhoto: state.profilePage.profile !== null ? state.profilePage.profile.photos.small : null\r\n  };\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  addNewPost: (postText: string, photo: string | null) => void\r\n  likeDislikeMyPost: (postId: number, boolean: boolean) => void\r\n  deleteMyPost: (postId: number) => void\r\n  deleteAllMyPosts: () => void\r\n}\r\nexport default compose<ComponentType<{}>>(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps, {\r\n    addNewPost: actionsProfile.addNewPost,\r\n    likeDislikeMyPost,\r\n    deleteMyPost: actionsProfile.deleteMyPost,\r\n    deleteAllMyPosts: actionsProfile.deleteAllMyPosts\r\n  }),\r\n  withRouter\r\n)(MyPostsContainer);\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport  MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport styles from '../../styles/Profile.module.scss'\r\nimport { ProfileType } from \"../../redux/reducers/reduceProfile\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  profileUpdate: boolean | null\r\n  isFollow: boolean\r\n  isOwner: number \r\n\r\n  updateUserStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (formData: ProfileType) => void\r\n  startDialogThunk: (userId: number) => void\r\n  onFollowThunk: (userId: number, isFollow: boolean) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <Card className={styles.global} >\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        profileUpdate={props.profileUpdate}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n        status={props.status}\r\n        updateUserStatus={props.updateUserStatus}\r\n        startDialogThunk={props.startDialogThunk}\r\n        isFollow={props.isFollow}\r\n        onFollowThunk={props.onFollowThunk}\r\n      />\r\n      <MyPostsContainer />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n  getProfileThunk,\r\n  getUserStatus,\r\n  updateUserStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n  onFollowThunk,\r\n  ProfileType,\r\n} from \"../../redux/reducers/reduceProfile\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { startDialogThunk } from \"../../redux/reducers/reduceDialogs\";\r\nimport { GlobalStateType } from \"../../redux/reduxStore\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<{userId: string}>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  userProfileId() {\r\n    const userId = this.props.match.params.userId\r\n\r\n    if (this.props.isAuth) {\r\n      if (!userId) {\r\n        if (this.props.authUserId !== null) {\r\n          this.props.getProfileThunk(this.props.authUserId)\r\n          this.props.getUserStatus(this.props.authUserId)\r\n        }\r\n      } else {\r\n        this.props.getProfileThunk(Number(userId))\r\n        this.props.getUserStatus(Number(userId))\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.userProfileId();\r\n  }\r\n\r\n  componentDidUpdate(prevState: PropsType) {\r\n    if (this.props.match.url !== prevState.match.url) {\r\n      this.userProfileId();\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        isOwner={Number(this.props.match.params.userId)}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        profileUpdate={this.props.profileUpdate}\r\n        updateUserStatus={this.props.updateUserStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        saveProfile={this.props.saveProfile}\r\n        startDialogThunk={this.props.startDialogThunk}\r\n        isFollow={this.props.isFollow}\r\n        onFollowThunk={this.props.onFollowThunk}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  profileUpdate: boolean | null\r\n  isFollow: boolean\r\n  authUserId: number | null\r\n  isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: GlobalStateType): MapStateToPropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    profileUpdate: state.profilePage.profileUpdate,\r\n    isFollow: state.profilePage.isFollow,\r\n    authUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n  };\r\n};\r\ntype MapDispatchToPropsType = {\r\n  getProfileThunk: (userId: number) => void\r\n  getUserStatus: (userId:  number) => void\r\n  updateUserStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (formData: ProfileType) => void\r\n  startDialogThunk: (userId: number) => void\r\n  onFollowThunk: (userId: number, isFollow: boolean) => void\r\n}\r\nexport default compose<ComponentType<{}>>(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, GlobalStateType>(mapStateToProps, {\r\n    getProfileThunk,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n    startDialogThunk,\r\n    onFollowThunk\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}